import type { Metadata } from "next";
import Script from "next/script";
import "./globals.css"; 
import localFont from "next/font/local";
import Navbar from "@/components/Navbar";
import LinedBackground from "@/components/ui/LinedBackground";
import { NextIntlClientProvider } from "next-intl";
import { getMessages } from "next-intl/server";
import { notFound } from "next/navigation";

const ObjectSans = localFont({
  src: [
    { path: './fonts/ObjectSans.woff2', weight: '400', style: 'normal' },
    { path: './fonts/ObjectSans-Heavy.woff2', weight: '600', style: 'normal' },
  ],
  display: 'swap',
  preload: true,
  variable: '--font-objectSans',
  adjustFontFallback: 'Arial',
});

const PlaypenSansArabic = localFont({
  src: [
    { path: './fonts/playpen-sans-arabic-400.woff2', weight: '400', style: 'normal' },
    { path: './fonts/playpen-sans-arabic-600.woff2', weight: '600', style: 'normal' },
  ],
  display: 'swap',
  preload: true,
  variable: '--font-playpenSansArabic',
  adjustFontFallback: 'Arial',
});

export const metadata: Metadata = {
  title: "Bishoy Morgan | Full stack Developer",
  description: "Generated by Bishoy Morgan",
};

const locales = ['en', 'es', 'ar'];

export default async function LocaleLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  params: Promise<{ locale?: string }>;
}) {
  const resolvedParams = await params;
  const locale = resolvedParams.locale || 'en';

  if (resolvedParams.locale && !locales.includes(resolvedParams.locale)) {
    notFound();
  }

  const messages = await getMessages({ locale });

  return (
    <html lang={locale}>
      <head>
          <link
            rel="preload"
            href="/fonts/ObjectSans.woff2"
            as="font"
            type="font/woff2"
            crossOrigin="anonymous"
          />
          <link
            rel="preload"
            href="/fonts/ObjectSans-Heavy.woff2"
            as="font"
            type="font/woff2"
            crossOrigin="anonymous"
          />
        <link rel="preconnect" href="https://www.googletagmanager.com" crossOrigin="" />
        <link rel="preconnect" href="https://www.google-analytics.com" crossOrigin="" />
        
        {process.env.NEXT_PUBLIC_GTM_ID && (
          <Script
            id="gtm-init"
            strategy="lazyOnload"
            dangerouslySetInnerHTML={{
              __html: `
                (function(w,d,s,l,i){
                  w[l]=w[l]||[];
                  w[l].push({'gtm.start': new Date().getTime(),event:'gtm.js'});
                  var f=d.getElementsByTagName(s)[0],
                  j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';
                  j.async=true;
                  j.src='https://www.googletagmanager.com/gtm.js?id='+i+dl;
                  f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','${process.env.NEXT_PUBLIC_GTM_ID}');
              `,
            }}
          />
        )}
      </head>
      <body
        dir={locale === "ar" ? "rtl" : "ltr"}
        className={
          locale === "ar"
            ? `${PlaypenSansArabic.className} antialiased`
            : `${ObjectSans.variable} antialiased`
        }
      >
        {process.env.NEXT_PUBLIC_GTM_ID && (
          <noscript>
            <iframe
              src={`https://www.googletagmanager.com/ns.html?id=${process.env.NEXT_PUBLIC_GTM_ID}`}
              height="0"
              width="0"
              style={{ display: "none", visibility: "hidden" }}
            ></iframe>
          </noscript>
        )}

        <NextIntlClientProvider locale={locale} messages={messages}>
          <LinedBackground />
          <Navbar />
          {children}
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
